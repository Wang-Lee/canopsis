#!/bin/bash

NAME="mongodb-conf"
VERSION=0.7
RELEASE=0
DESCRIPTION=""
REQUIRES="canohome python canolibs canotools mongodb"

NO_ARCH=true
NO_DIST=true
NO_DISTVERS=true

function safe_prompt() {
	if [ "$3" == "show" ]
	then
		OPTS="-p"
	else
		OPTS="-s -p"
	fi

	empty=true

	while $empty
	do
		empty=false

		eval "read $OPTS \"$1\" $2; echo; [[ \"x\$$2\" == \"x\" ]]"

		if [ $? -eq 0 ]
		then
			empty=true

			echo "You can't let that field empty!"
		fi
	done
}

function pre_install(){
    echo "Pre-install $NAME $VERSION-$RELEASE ..."
	check_code $?
}

function post_install(){
	echo "Post-install $NAME $VERSION-$RELEASE ..."

	launch_cmd 0 service mongodb stop

	rm /tmp/mongodb-*.sock &> /dev/null || true

	#launch_cmd 1 service mongodb start
	launch_cmd 1 mongod -f $PREFIX/etc/mongodb.conf --nojournal --noprealloc --fork

	echo -n "Safe wait ..."
	STATE=1
	TRY=0

	while [ $STATE -ne 0 ]
	do
		if [ $TRY -eq 10 ]
		then
			break
		fi

		sleep 1

		echo "show dbs" | mongo &> /dev/null
		STATE=$?
		TRY=$((TRY + 1))

		echo -n "."
	done

	echo
	check_code $STATE "Failed to join MongoDB"

	while true
	do
		safe_prompt "MongoDB password for admin: " adminpass
		safe_prompt "Confirm password: " confirm

		if [ "$adminpass" == "$confirm" ]
		then
			break
		else
			echo "Passwords doesn't match"
		fi
	done

	safe_prompt "MongoDB common user: " cpsuser "show"

	while true
	do
		safe_prompt "MongoDB password for $cpsuser: " cpspass
		safe_prompt "Confirm password: " confirm

		if [ "$cpspass" == "$confirm" ]
		then
			break
		else
			echo "Passwords doesn't match"
		fi
	done

	echo " + Create admin user ..."
	su - $HUSER -c "$PREFIX/bin/mongo admin --eval \"db.createUser({user: 'admin', pwd: '$adminpass', roles: ['readWriteAnyDatabase', 'userAdminAnyDatabase', 'dbAdminAnyDatabase']})\""
	check_code $? "Impossible to create"

	echo " + Create $cpsuser user ..."
	su - $HUSER -c "$PREFIX/bin/mongo -u admin -p $adminpass --authenticationDatabase admin canopsis --eval \"db.createUser({user: '$cpsuser', pwd: '$cpspass', roles: ['dbOwner']})\""

	su - $HUSER -c "$PREFIX/bin/initool set $PREFIX/etc/cstorage.conf master userid $cpsuser"
	su - $HUSER -c "$PREFIX/bin/initool set $PREFIX/etc/cstorage.conf master password $cpspass"

	su - $HUSER -c "$PREFIX/bin/initool set $PREFIX/etc/database.conf DATABASE user $cpsuser"
	su - $HUSER -c "$PREFIX/bin/initool set $PREFIX/etc/database.conf DATABASE pwd $cpspass"

	launch_cmd 1 python $PREFIX/opt/mongodb/filldb.py init

	#launch_cmd 1 service mongodb stop
	launch_cmd 1 mongod -f etc/mongodb.conf --shutdown

	check_code $? "Impossible to init mongoDB ..."
}

function pre_remove(){
	echo "Pre-remove $NAME $VERSION-$RELEASE ..."
	su - $HUSER -c "service mongodb stop"
}

function post_remove(){
	echo "Post-remove $NAME $VERSION-$RELEASE ..."
}

function pre_update(){
	echo "Pre-update $NAME $VERSION-$RELEASE ..."
}

function post_update(){
	echo "Post-update $NAME $VERSION-$RELEASE ..."

	su - $HUSER -c "service mongodb start"
	check_code $?

	echo "   + Copy JSON schemas"
	mkdir -p $PREFIX/etc/schema.d
	cp -Rf $SRC_PATH/mongodb-conf/etc/schema.d/* $PREFIX/etc/schema.d
	check_code $?

	echo "   + Fix permissions"
	chown -R $HUSER:$HGROUP $PREFIX/etc/schema.d
	check_code $?

	launch_cmd 1 python $PREFIX/opt/mongodb/filldb.py update
	check_code $?
}

function purge(){
	echo "Purge $NAME $VERSION-$RELEASE ..."
	check_code $?
}
